#!/bin/sh
# =======================================================================
#           ‼️ PLEASE DO NOT USE VAULTRON IN PRODUCTION ‼️
#
# lion_torches
#
# This script is the nuclear option; it removes all traces of Vaultron
# created data so that the user can start over. It does not invoke
# Terraform and instead uses only OS and docker commands.
#
# shellcheck disable=SC1091
# =======================================================================

. ./skydome

# Preflight checks
check_flavor

TF_VAR_vault_flavor=$TF_VAR_vault_flavor || TF_VAR_vault_flavor=consul

if [ "$VAULTRON_KATACODA" = "false" ]; then
  check_docker
fi

msg greeting "Lion Torches activated ..."

msg info "Removing all Vaultron generated data ..."

cd "flavors/$TF_VAR_vault_flavor" || echo "Cannot select flavor" && exit 1

# The nuclear options for Vaultron's imminent demise

if ! for d in $(docker ps -a | grep vaultron | cut -d ' ' -f 1); \
  do docker stop "$d"; docker rm "$d"; done;
then
  msg alert "Cannot remove Docker containers!"
  msg info "Use 'docker ps -a' to identify, stop, and remove all vaultron containers."
  exit 1
fi

# If we cannot write to the Consul data, alert user and attempt to change
# ownership of consul/vault folders to avoid failure with Terraform destroy
# NB: This occurs on Docker on Linux but not Docker for Mac
#     This should be resolved by using SKIP_CHOWN now as well
if [ "$TF_VAR_vault_flavor" = "consul" ]; then
  if [ "$(uname)" = "Linux" ]; then
    if ! [ -w flavor/"${TF_VAR_vault_flavor}"/consul/consuls0 ]; then
      msg notice "Consul data not writable; attempting to change ownership of consul & vault folders to $VAULTRON_USER:$VAULTRON_GROUP ..."
      msg notice "You could be prompted by sudo for your user password to make this change ..."
      if ! sudo chown -R "${VAULTRON_USER}":"${VAULTRON_GROUP}" flavor/"${TF_VAR_vault_flavor}"/consul; then
        msg alert "Failed to change ownership of consul data to $VAULTRON_USER:$VAULTRON_GROUP"
        msg alert "Manual cleanup of consul folder contents required:"
        ls -lha consul/
      fi
      if ! sudo chown -R "${VAULTRON_USER}":"${VAULTRON_GROUP}" flavor/"${TF_VAR_vault_flavor}"/vault; then
        msg alert "Failed to change ownership of vault data to $VAULTRON_USER:$VAULTRON_GROUP"
        msg alert "Manual cleanup of vault folder contents required:"
        ls -lha vault/
      fi
    fi
  fi
fi

# Remove Consul client data
if [ "$TF_VAR_vault_flavor" = "consul" ]; then
  rm -rf ./flavors/consul/consul/consulc0
  errors=$((errors + $?))
  rm -rf ./flavors/consul/consul/consulc1
  errors=$((errors + $?))
  rm -rf ./flavors/consul/consul/consulc2
  errors=$((errors + $?))
fi

# Remove Consul server data
if [ "$TF_VAR_vault_flavor" = "consul" ]; then
  rm -rf ./flavors/consul/consul/consuls0
  errors=$((errors + $?))
  rm -rf ./flavors/consul/consul/consuls1
  errors=$((errors + $?))
  rm -rf ./flavors/consul/consul/consuls2
  errors=$((errors + $?))
fi

# Remove Vault server data for Consul storage
rm -rf ./flavors/consul/vault/vault0
errors=$((errors + $?))
rm -rf ./flavors/consul/vault/vault1
errors=$((errors + $?))
rm -rf ./flavors/consul/vault/vault2
errors=$((errors + $?))
rm -f ./flavors/consul/vault/vault0/vault_DEV_ONLY*.tmp
errors=$((errors + $?))

# Remove Vault server data for Integrated Storage
rm -rf ./flavors/raft/vault/vault0
errors=$((errors + $?))
rm -rf ./flavors/raft/vault/vault1
errors=$((errors + $?))
rm -rf ./flavors/raft/vault/vault2
errors=$((errors + $?))
rm -rf ./flavors/raft/vault/vault3
errors=$((errors + $?))
rm -rf ./flavors/raft/vault/vault4
errors=$((errors + $?))
rm -f ./flavors/raft/vault/vault0/vault_DEV_ONLY*.tmp
errors=$((errors + $?))

# Remove Telemetry data
rm -rf ./yellow_lion/grafana_data
errors=$((errors + $?))

# Remove Terraform state, plans, backend configuration, and logs

## Consul
rm -f ./flavors/consul/tfstate/terraform.tfstate*
errors=$((errors + $?))
rm -f ./flavors/consul/tfstate/vaultron*.plan
errors=$((errors + $?))
rm -rf ./flavors/consul/.terraform/modules
errors=$((errors + $?))
rm -f ./flavors/consul/.terraform/terraform.tfstate*
errors=$((errors + $?))
rm -rf ./flavors/consul/log/*
errors=$((errors + $?))

## Raft
rm -f ./flavors/raft/tfstate/terraform.tfstate*
errors=$((errors + $?))
rm -f ./flavors/raft/tfstate/vaultron*.plan
errors=$((errors + $?))
rm -rf ./.terraform/modules
errors=$((errors + $?))
rm -f ./flavors/raft/.terraform/terraform.tfstate*
errors=$((errors + $?))
rm -rf ./flavors/raft/log/*
errors=$((errors + $?))

if [ $errors -gt 0 ]; then
  msg alert "Vaultron unformed (with $errors errors)!"
  tput sgr0
else
  msg boom "Vaultron unformed!"
  tput sgr0
fi

tput sgr0

cd ../..

exit $errors
